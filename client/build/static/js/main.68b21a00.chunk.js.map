{"version":3,"sources":["Components/Blob.js","Components/Header.js","Components/Content.js","services/socket.js","Components/Overlay.js","App.js","reportWebVitals.js","index.js"],"names":["Blob","canvasRef","useRef","useEffect","console","log","scene","THREE","camera","window","innerWidth","innerHeight","renderer","canvas","current","antialias","alpha","setClearColor","setSize","light","add","light2","position","set","geometry","material","color","wireframe","cube","z","animate","time","performance","now","attributes","needsUpdate","matrixAutoUpdate","rotation","i","array","length","v","normalize","multiplyScalar","perlin3D","x","y","requestAnimationFrame","render","ref","className","Header","props","Content","state","text","socketInstance","onMessage","_data","socket","on","data","this","io","Overlay","useState","status","setStatus","Socket","message","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68b21a00.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport './Blob.css'\r\nimport * as THREE from 'three'\r\nimport { perlin3D } from '@leodeslf/perlin-noise'\r\n\r\nconst Blob = () => {\r\n  const canvasRef = useRef()\r\n\r\n  useEffect(() => {\r\n    console.log('init')\r\n    const scene = new THREE.Scene()\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    )\r\n    const renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n      alpha: true,\r\n    })\r\n    renderer.setClearColor(0x000000, 0)\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n    const light = new THREE.AmbientLight(0xefe0ff) // soft white light\r\n    scene.add(light)\r\n\r\n    const light2 = new THREE.PointLight(0xefe0ff, 6, 50)\r\n    light2.position.set(10, 10, 15)\r\n    scene.add(light2)\r\n\r\n    const geometry = new THREE.SphereGeometry(3, 128, 128)\r\n\r\n    const material = new THREE.MeshStandardMaterial({\r\n      color: 0x7b2eff,\r\n      wireframe: false,\r\n    })\r\n    const cube = new THREE.Mesh(geometry, material)\r\n    scene.add(cube)\r\n    camera.position.z = 3\r\n\r\n    const animate = () => {\r\n      var time = performance.now() * 0.001\r\n      var k = 2\r\n      geometry.attributes.position.needsUpdate = true\r\n      cube.matrixAutoUpdate = true\r\n      cube.rotation.z += 0.0\r\n\r\n      for (var i = 0; i < geometry.attributes.position.array.length; i++) {\r\n        if (i % 3 === 0) {\r\n          const v = new THREE.Vector3(\r\n            geometry.attributes.position.array[i],\r\n            geometry.attributes.position.array[i + 1],\r\n            geometry.attributes.position.array[i + 2]\r\n          )\r\n\r\n          v.normalize().multiplyScalar(\r\n            1 + 0.3 * perlin3D(v.x * k + time, v.y * k, v.z * k)\r\n          )\r\n\r\n          geometry.attributes.position.array[i] = v.x\r\n          geometry.attributes.position.array[i + 1] = v.y\r\n          geometry.attributes.position.array[i + 2] = v.z\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(animate)\r\n      renderer.render(scene, camera)\r\n    }\r\n    animate()\r\n  })\r\n\r\n  return <canvas ref={canvasRef} className='three-canvas' />\r\n}\r\n\r\nexport default Blob\r\n","import React from 'react'\nimport './Header.css'\nconst Header = (props) => {\n  return (\n    <div className='header'>\n      <div className='tracy'>Tracy</div>\n      <div className='header-item'>The Smart Assistant</div>\n    </div>\n  )\n}\n\nexport default Header\n","import './Content.css'\n\nconst Content = (props) => {\n  return <div className='content'>{props.state.text}</div>\n}\n\nexport default Content\n","import io from 'socket.io-client'\nclass Socket {\n  constructor() {\n    this.socket = io('http://192.168.0.11:4242')\n    console.log('socket inişılayz')\n  }\n  onMessage = (_data) => {\n    this.socket.on('message', (data) => {\n      _data(data)\n    })\n  }\n}\n\nconst socketInstance = new Socket()\n\nexport default socketInstance\n","import React, { useEffect, useState } from 'react'\nimport Header from './Header'\nimport Content from './Content'\nimport Socket from '../services/socket'\nimport './Overlay.css'\n\nconst Overlay = (props) => {\n  const [status, setStatus] = useState({})\n\n  useEffect(() => {\n    console.log('app mounted')\n    Socket.onMessage((message) => {\n      if (message.text) {\n        setStatus(message)\n      }\n    })\n  }, [])\n  return (\n    <div className='overlay'>\n      <Header state={status} />\n      <Content state={status} />\n    </div>\n  )\n}\nexport default Overlay\n","import './App.css'\nimport Blob from './Components/Blob'\nimport Overlay from './Components/Overlay'\nconst App = () => {\n  return (\n    <div className='App'>\n      <Blob />\n      <Overlay />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}